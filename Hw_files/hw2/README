# Project
* CS 472
* HW2
* 3/12/2024
* Tyler Bowes
****************
 
# Overview

This program is a implementation of the text editor Lexi.  This has been implemented
with three main design patterns, Composite, Strategy, and Decorator.  Every class extends (does not
'implement' other than SimpleCompositor implementing Compositor) from root Glyph class,
see UML for visual.  With the use of these strategies once the program runs it will
open a text editor displaying what was prompted inside main.java. 

This homework implements Decorator pattern by adding Embellishment class. This class
is used to add borders and scrollers. For example a border is initialized with a Glyph
and compositor, and you would then add glyphs to the border. The border then adds thoses
glyphs into the initial glyph when initialized.  The scroller is the same way.

# Included Files

main.java
README
UML image
window-
    SwingWindow.java
    Window.java
glyph-
    Bounds.java
    Character.java
    Column.java
    CompositeGlyph.java
    Composition.java
    Compositor.java
    Glyph.java
    Rectangle.java
    Row.java
    SimpleCompositor.java
    Border.java
    Scroller.java
    Embellishment.java

# Testing/Test Suit

I first tested some functionality with have single glyphs like characters.
After that, rows and columns with children.  As an example of a row with children being
tested through main, I would create tests and call them inside of main(). For example,
a test would look like this:

    public static void simpborder(){
        Window window = new SwingWindow("Lexi 0");
        SimpleCompositor simcom1 = new SimpleCompositor(window);
        SimpleCompositor simcom2 = new SimpleCompositor(window);

        Row row1 = new Row(simcom1);
        Border border1 = new Border(simcom2, row1, 2);

        Glyph X = new Character('X');
        Glyph Y = new Character('Y');
        Glyph Z = new Character('Z');

        try {
            border1.addChild(X, 0);
            border1.addChild(Y, 1);
            border1.addChild(Z, 2);
        } catch (UnsupportedOperationException e) {
            e.printStackTrace();
        }

        window.setContents(border1);
    }

For this example I would then call simpborder() inside of main.

To test more, I started putting borders inside of scrollers and vise 
versa (like simpBorderScroller() test in main).  Then adding borders within rows/
columns. 

# Other Observations

I did add the "fancy constructor" to the Row and Column classes. Current implementation
works with rows but when working with multiple rows inside a column is where it gets funky.
I know I have a problem with my column class, specifically with the spacing, espically 
with the width, as it seems it doesn't update. 

I tested this example by setting the column as an Embellishment of a border, consisting
of three rows in the column. With current implementation, width seems to be negative (which
sets the drawing of it to 0).  I have reason to believe that when testing like this, Compose()
seems to execute twice, I have yet to figure out why this happens (reason: two print statements
with the same data right next to eachother and 6 prints when adding 3 items).

Rows seem to be working perfectly, it just seems like columns that are the problem. Which I 
think is most strange.

# Compiling 

To compile and run the program go inside the folder with main inside of it.
When you are in the correct folder with main run:

$    javac main.java

to run:

$    java main